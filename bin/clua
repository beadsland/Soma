#!/usr/bin/env perl

# Copyright © 2017 Beads Land-Trujillo
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
# either express or implied. See the License for the specific
# language governing permissions and limitations under the License.

use strict;
use warnings;
use diagnostics;

use Term::ANSIColor qw(:constants colorstrip);

our $rCOL = qr|\033[\d;]+m|;

our $rFILPAT = qr|(([^/ ']*/)*[^/ ']*/[^/ ']*)|; # match a file path
our $rBEF = qr/(?:^|[ \[])/;
our $rAFT = qr/(?:$|[ \],])/;

require 5.018_001;
# .perlcriticrc:
#    [TestingAndDebugging::ProhibitNoWarnings]
#    allow_with_category_restriction = 1
no warnings "experimental::regex_sets";
our $rNAME = qr/(?[ \w & [^\d] ])\w*/;

###
# Wrap standard lua and capture both STDIN & STDERR.
###
my $args = join(' ', @ARGV);
my $cmd = "lua $args";
my $prefix = "sed 's/^/STDOUT:/'";
my $errfix = "sed 's/^/STDERR:/'";
my $collate = "(stdbuf -o 0 -e 0 $cmd) 2>&1";
open(my $LUA, "-|", "$collate");
colorize($LUA);
close($LUA);

###
# Parse input line by line, truncating repetitive lines where
# appropraite, otherwise passing to term() to colorize.
###
sub colorize {
  my ($LUA) = @_;

  while (<$LUA>) {
    if (/^STDOUT:(.*)$/)        { print "$1\n" }
    elsif (/^lua:/)             { print RED . terms($_, RED) . RESET }
    elsif (/^\tno field /)      { print YELLOW . terms($_, YELLOW) . RESET
    }
    elsif (/^\tno file \'/)     { print nofile($_) }
    elsif (/^stack traceback:/) { print; truncstack($LUA) }
    else                        { print terms($_) }
  }
  return
}

my $st = 0;
sub truncstack {
  my ($LUA) = @_;
  while (<$LUA>) {
    if (/^STDOUT:(.*)$/) { print "$1\n" }
    elsif (++$st < 5)    { print terms($_) }
    elsif ($st == 5)     { print BOLD.YELLOW . "\t\t∗\t∗\t∗\n" . RESET }
  }
  return
}

my $nf = 0;
sub nofile {
  my ($line) = @_;
  if (++$nf < 3)   { return YELLOW . terms($line, YELLOW) . RESET }
  elsif ($nf == 3) { return BOLD.YELLOW . "\t\t∗\t∗\t∗\n" . RESET }
  else             { return "" }
}

###
# Workhorse function that does bulk of pattern colorizing.
###

sub terms {
  my ($line, $oldcolor) = @_;
  my $REVERT = $oldcolor ? RESET . $oldcolor : RESET;

  $line =~ s|([\[\]\{\}])|@{[tabcons($1, $REVERT)]}|g;
  $line =~ s|(($rNAME\.)+$rNAME)|@{[dotsyn($1, $REVERT)]}|g;
  $line =~ s|$rCOL*$rFILPAT$rCOL*:([0-9]+):|@{[fileline($1, $3, $REVERT)]}|g;
  $line =~ s|($rBEF)'([^\']*)'($rAFT)|$1@{[stringy($2, $REVERT, "'")]}$3|g;
  $line =~ s|($rBEF)\"([^\"]*)\"($rAFT)|$1@{[stringy($2, $REVERT, '"')]}$3|g;
  return $line
}

sub tabcons {
  my ($str, $REVERT) = @_;
  return BOLD.MAGENTA . $str . $REVERT
}

sub dotsyn {
  my ($str, $REVERT) = @_;
  return CYAN . $str . $REVERT
}

sub stringy {
  my ($str, $REVERT, $qt) = @_;
  return ($str =~ /$rFILPAT/) ? $qt . GREEN . $str . $REVERT . $qt
                              : BOLD.WHITE . $qt . $str .
                                BOLD.WHITE . $qt . $REVERT
}

sub fileline {
  my ($file, $line, $REVERT) = @_;
  return GREEN . $file . $REVERT . ':' .
         BOLD.GREEN . $line . $REVERT . ':'
}

sub color {
  my ($str, $new, $old) = @_;
  return $new . colorstrip($str) . ($old or RESET);
}
